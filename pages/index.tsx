import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import React from 'react'
import axios from 'axios'
import * as yup from 'yup'
import { useFormik } from 'formik'

const server_url = 'http://localhost:5000/todo'

const t = [
  {
    _id: '',
    title: '',
    description: '',
  },
]

export default function Home() {
  const [res, setRes] = React.useState('')
  const [todo, setTodo] = React.useState([])
  const [toEdit, setToEdit] = React.useState(false)
  const [editValue, setEditValue] = React.useState({
    _id: '',
    title: '',
    description: '',
  })

  const handleDelete = async (id: string) => {
    const { status, data } = await axios.delete(
      `${server_url}/delete?todoId=${id}`,
    )
    if (status === 200) {
      setRes('Todo deleted')
    }
  }

  const editTodo = async (val: {
    _id: string
    title: string
    description: string
  }) => {
    setEditValue(val)
    setToEdit(true)
  }

  const handleEditSubmit = async (e) => {
    e.preventDefault()

    const { _id, title, description } = editValue
    const { status, data } = await axios.patch(`${server_url}/update`, {
      id: _id,
      payload: { title, description },
    })
    if (status === 200) {
      setRes('Todo updated succesffuly')
    }
    setEditValue({})
  }
  React.useEffect(() => {
    setInterval(() => {
      setRes('')
    }, 90000)
  }, [res, todo, editTodo])

  React.useEffect(() => {
    const getTodos = async () => {
      const { data, status } = await axios.get(`${server_url}/todos`)
      if (status === 200) {
        setTodo(data.data)
      } else {
        setTodo([])
      }
    }

    getTodos()
  }, [res, todo])

  const todoValidator = yup.object({
    title: yup.string().required('Title is required'),
    description: yup.string().required('Description is requried'),
  })

  const formik = useFormik({
    initialValues: {
      title: '',
      description: '',
    },

    onSubmit: async (values, actions) => {
      actions.setSubmitting(true)

      if (values) {
        const { data, status } = await axios.post(
          `${server_url}/create`,
          values,
        )
        if (status === 201) {
          setRes('Todo created')
        }
        actions.setSubmitting(false)
        actions.resetForm()
      }

      actions.setSubmitting(false)
    },

    validationSchema: todoValidator,
  })

  return (
    <>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className={styles.navbar}>
        <ul>
          <li>
            <a href={'/'}>Todo App</a>
          </li>
        </ul>
      </nav>
      <main className={styles.main}>
        <div className={styles.middle}>
          <div className={styles.form}>
            {toEdit ? (
              <form>
                <h3>Edit Form</h3>
                <div>
                  <input
                    id="title"
                    name="title"
                    type="text"
                    placeholder="Title"
                    onChange={(e) =>
                      setEditValue({ ...editValue, title: e.target.value })
                    }
                    value={editValue.title}
                  />
                </div>
                <div>
                  <textarea
                    rows={10}
                    id="description"
                    name="description"
                    placeholder="Description"
                    onChange={(e) =>
                      setEditValue({
                        ...editValue,
                        description: e.target.value,
                      })
                    }
                    value={editValue.description}
                  ></textarea>
                </div>

                <div>
                  <button
                    className={styles.btn}
                    type="submit"
                    onClick={(e) => handleEditSubmit(e)}
                  >
                    Submit
                  </button>
                </div>
              </form>
            ) : (
              <form onSubmit={formik.handleSubmit}>
                <h3>Todo Form</h3>
                <div>
                  <input
                    id="title"
                    name="title"
                    type="text"
                    placeholder="Title"
                    onChange={formik.handleChange}
                    value={formik.values.title}
                  />
                </div>
                <div>
                  <textarea
                    rows={10}
                    id="description"
                    name="description"
                    placeholder="Description"
                    onChange={formik.handleChange}
                    value={formik.values.description}
                  ></textarea>
                </div>

                <div>
                  <button className={styles.btn} type="submit">
                    {formik.isSubmitting ? 'Submitting' : 'Submit'}
                  </button>
                </div>
              </form>
            )}
          </div>
          <p style={{ width: '70%', margin: 'auto', color: 'green' }}>
            {res && <strong>{res}</strong>}
          </p>
          {todo.length !== undefined ? (
            todo.map(
              (item: { _id: string; title: string; description: string }) => {
                return (
                  <div className={styles.item} key={item._id}>
                    <h4 className={styles.title}>{item.title}</h4>
                    <p className={styles.desc}>{item.description}</p>
                    <div className={styles.holder}>
                      <a
                        className={styles.delete}
                        onClick={() => handleDelete(item._id)}
                      >
                        Delete
                      </a>
                      <a className={styles.edit} onClick={() => editTodo(item)}>
                        Edit
                      </a>
                      <a className={styles.mark} onClick={() => editTodo(item)}>
                        <input type="checkbox" />
                      </a>
                    </div>
                  </div>
                )
              },
            )
          ) : (
            <div>Loading...</div>
          )}
        </div>
      </main>
    </>
  )
}
